{"version":3,"sources":["cellular-automata/1d/elementaryCellularAutomata1D.ts","cellular-automata/1d/totalisticCellularAutomata1D.ts","cellular-automata/index.ts","sketch/SketchProvider.ts","performers/cellularAutomataDrawer.ts","performers/cellularAutomataPlayer.ts","sketch/sketch.tsx","euterpe/euterpe.tsx","index.tsx"],"names":["ElementaryCellularAutomata1D","states","size","radius","rule","initialState","lookupTable","_state","tempState","neighbourhoodCode","this","Array","from","length","state","forEach","_","index","evolveCellAt","stateSave","code","computeCodeFor","lookUpIndex","exponential","Math","pow","i","wrappedIndex","offsetA","offsetB","Builder","randomInitialConfiguration","Error","ruleCharacters","BigInt","toString","character","round","random","floor","Dimensions","Type","TotalisticCellularAutomata1D","numberOfInvolvedCells","CellularAutomata","dimensions","UNIDIMENSIONAL","type","ELEMENTARY","BIDIMENSIONAL","TOTALISTIC","buildTotallistic1D","buildElementary1D","DefaultAutomata","withDimensions","withType","withSize","withRule","withStates","build","SketchProvider","React","createContext","colors","CellularAutomata1DPainter","sketch","automata","step","cellSize","ceil","width","noStroke","fill","rect","CellularAutomata1DPlayer","instrument","note","lastNote","notes","triggerRelease","livingCells","filter","Tone","triggerAttack","a","urls","A1","A2","baseUrl","toDestination","automataPainter","automataPlayer","p5","initialAutomata","painter","withSketch","withAutomata","player","isSetup","sketchElement","document","getElementById","clientWidth","height","clientHeight","setup","createCanvas","frameRate","initPerformers","then","updateWithProps","props","updateAutomata","clear","draw","play","evolve","CellularAutomataSketch","Consumer","className","id","customClass","Euterpe","useState","started","setStarted","setRule","setAutomata","randomiseRule","Provider","value","src","process","alt","onClick","ReactDOM","render"],"mappings":"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","file":"static/js/main.be5e04f7.chunk.js","sourcesContent":["import { CellularAutomata1D } from './cellularAutomata1D';\n\nexport class ElementaryCellularAutomata1D implements CellularAutomata1D {\n    readonly states: number;\n    readonly size: number;\n    readonly radius: number;\n    readonly rule: number;\n    private _state: number[];\n    private tempState: number[];\n    private neighbourhoodCode: number[];\n    private lookupTable: number[];\n\n    constructor(states: number, size: number, radius: number, rule: number, initialState: number[], lookupTable: number[]) {\n        this.states = states;\n        this.size = size;\n        this.radius = radius;\n        this.rule = rule;\n        this._state = initialState;\n        this.lookupTable = lookupTable;\n        this.tempState = Array.from({ length: size });\n        this.neighbourhoodCode = Array.from({ length: size });\n    }\n\n    get state(): readonly number[] {\n        return this._state;\n    }\n\n    evolve() {\n        this.state.forEach((_, index) => { this.evolveCellAt(index); });\n        const stateSave = this.tempState;\n        this.tempState = this._state;\n        this._state = stateSave;\n    }\n\n    private evolveCellAt(index: number) {\n        const code = this.lookupTable.length - this.computeCodeFor(index) - 1;\n        this.tempState[index] = code >= 0 ? this.lookupTable[code] : 0;\n    }\n\n    private computeCodeFor(index: number) {\n        let exponential = Math.pow(this.states, 2 * this.radius)\n        let lookUpIndex: number;\n        let code = 0;\n        if (index === 0) {\n            for (let i = -this.radius; i <= this.radius; i++) {\n                lookUpIndex = this.wrappedIndex(i);\n                code += exponential * this._state[lookUpIndex];\n                exponential /= this.states;\n            }\n        } else {\n            lookUpIndex = this.wrappedIndex(index - this.radius - 1);\n            let offsetA = exponential * this._state[lookUpIndex];\n            lookUpIndex = this.wrappedIndex(index + this.radius);\n            let offsetB = this._state[lookUpIndex];\n            code = (this.neighbourhoodCode[index - 1] - offsetA) * this.states + offsetB;\n        }\n        this.neighbourhoodCode[index] = code;\n        return code;\n    }\n\n    private wrappedIndex(index: number) {\n        return index < 0 ? index + this.size : index >= this.size ? index - this.size : index;\n    }\n\n\n    static Builder = class {\n        private states: number = 2;\n        private size: number = 100;\n        private rule: number = 0;\n        private randomInitialConfiguration: boolean = false;\n\n        withStates(states: number) {\n            if (states < 1) {\n                throw new Error(\"Number of states must be greater than 1\");\n            }\n            this.states = states;\n            return this;\n        }\n\n        withSize(size: number) {\n            this.size = size;\n            if (size <= 10) {\n                throw new Error(\"Size of cellular automata must be greater than 10\");\n            }\n            return this;\n        }\n\n        withRule(rule: number) {\n            this.rule = rule;\n            if (rule < 0) {\n                throw new Error(\"Rule must be a positive number\");\n            }\n            return this;\n        }\n\n        withRandomInitialConfiguration() {\n            this.randomInitialConfiguration = true;\n            return this;\n        }\n\n        build() {\n            const radius = 1;\n            const ruleCharacters = Array.from(BigInt(this.rule).toString(this.states));\n            const lookupTable: number[] = Array.from({ length: ruleCharacters.length });\n            for (let i = 0; i < ruleCharacters.length; i++) {\n                let character = ruleCharacters[i];\n                if (character >= '0' && character <= '9') {\n                    lookupTable[i] = +ruleCharacters[i] - +'0';\n                } else {\n                    lookupTable[i] = +ruleCharacters[i] - +'W'\n                }\n            }\n            const initialState = this.randomInitialConfiguration\n                ? Array.from({ length: this.size }, () => Math.round(Math.random()))\n                : Array.from({ length: this.size }, (_, index) => index === Math.floor(this.size / 2) ? 1 : 0);\n\n            return new ElementaryCellularAutomata1D(\n                this.states,\n                this.size,\n                radius,\n                this.rule,  \n                initialState,\n                lookupTable\n            );\n        }\n    }\n}","import { CellularAutomata1D } from \"./cellularAutomata1D\";\n\nexport class TotalisticCellularAutomata1D implements CellularAutomata1D {\n    readonly states: number;\n    readonly size: number;\n    readonly radius: number;\n    readonly rule: number;\n    private _state: number[];\n    private tempState: number[];\n    private neighbourhoodCode: number[];\n    private lookupTable: number[];\n\n    constructor(states: number, size: number, radius: number, rule: number, initialState: number[], lookupTable: number[]) {\n        this.states = states;\n        this.size = size;\n        this.radius = radius;\n        this.rule = rule;\n        this._state = initialState;\n        this.lookupTable = lookupTable;\n        this.tempState = Array.from({ length: size });\n        this.neighbourhoodCode = Array.from({ length: size });\n    }\n\n    get state(): ReadonlyArray<number> {\n        return this._state;\n    }\n\n    evolve() {\n        this.state.forEach((_, index) => {\n            this.evolveCellAt(index);\n        });\n        const stateSave = this.tempState;\n        this.tempState = this._state;\n        this._state = stateSave;\n    }\n\n    private evolveCellAt(index: number) {\n        const code = this.lookupTable.length - this.computeCodeFor(index) - 1;\n        this.tempState[index] = code >= 0 ? this.lookupTable[code] : 0;\n    }\n\n    private computeCodeFor(index: number) {\n        let lookUpIndex: number;\n        let numberOfInvolvedCells = 2 * this.radius + 1;\n        let code = 0;\n        if (index === 0) {\n            for (let i = -this.radius; i < numberOfInvolvedCells; i++) {\n                lookUpIndex = this.wrappedIndex(i);\n                code += this._state[lookUpIndex];\n            }\n        } else {\n            lookUpIndex = this.wrappedIndex(index - this.radius - 1);\n            let offsetA = this._state[lookUpIndex];\n            lookUpIndex = this.wrappedIndex(index + this.radius);\n            let offsetB = this._state[lookUpIndex];\n            code = this.neighbourhoodCode[index - 1] - offsetA + offsetB;\n        }\n        this.neighbourhoodCode[index] = code;\n        return code;\n    }\n\n    private wrappedIndex(index: number) {\n        return index < 0 ? index + this.size : index >= this.size ? index - this.size : index;\n    }\n}","import { ElementaryCellularAutomata1D } from './1d/elementaryCellularAutomata1D';\nimport { TotalisticCellularAutomata1D } from './1d/totalisticCellularAutomata1D';\n\nexport interface CellularAutomata1D {\n    readonly radius: any;\n    readonly size: number;\n    readonly rule: number;\n    get state(): ReadonlyArray<number>;\n    evolve(): void;\n\n};\n\nexport enum Dimensions {\n    UNIDIMENSIONAL,\n    BIDIMENSIONAL\n}\n\nexport enum Type {\n    TOTALISTIC,\n    ELEMENTARY\n}\n\nexport class CellularAutomata {\n    static Builder = class {\n        private dimensions: Dimensions = Dimensions.UNIDIMENSIONAL;\n        private type: Type = Type.ELEMENTARY;\n        private states: number = 2;\n        private size: number = 100;\n        private rule: number = 0;\n        private randomInitialConfiguration: boolean = false;\n\n        withDimensions(dimensions: Dimensions) {\n            if (dimensions === Dimensions.BIDIMENSIONAL) {\n                throw new Error(\"Bi-dimensional automata not implemented yet\");\n            }\n            this.dimensions = dimensions;\n            return this;\n        }\n\n        withType(type: Type) {\n            this.type = type;\n            return this;\n        }\n\n        withStates(states: number) {\n            if (states < 1) {\n                throw new Error(\"Number of states must be greater than 1\");\n            }\n            this.states = states;\n            return this;\n        }\n\n        withSize(size: number) {\n            this.size = size;\n            if (size <= 10) {\n                throw new Error(\"Size of cellular automata must be greater than 10\");\n            }\n            return this;\n        }\n\n        withRule(rule: number) {\n            this.rule = rule;\n            if (rule < 0) {\n                throw new Error(\"Rule must be a positive number\");\n            }\n            return this;\n        }\n\n        withRandomInitialConfiguration() {\n            this.randomInitialConfiguration = true;\n            return this;\n        }\n\n        build() {\n            return this.type === Type.TOTALISTIC ? this.buildTotallistic1D() : this.buildElementary1D();\n        }\n\n        private buildTotallistic1D() {\n            const radius = 1;\n            const ruleCharacters = Array.from(BigInt(this.rule).toString(this.states));\n            const lookupTable: number[] = Array.from({ length: ruleCharacters.length });\n            for (let i = 0; i < ruleCharacters.length; i++) {\n                lookupTable[i] = +ruleCharacters[i] - +'0';\n            }\n            const initialState = this.randomInitialConfiguration\n                ? Array.from({ length: this.size }, () => Math.round(Math.random()))\n                : Array.from({ length: this.size }, (_, index) => index === Math.floor(this.size / 2) ? 1 : 0);\n\n            return new TotalisticCellularAutomata1D(\n                this.states,\n                this.size,\n                radius,\n                this.rule,\n                initialState,\n                lookupTable\n            );\n        }\n\n        private buildElementary1D() {\n            const radius = 1;\n            const ruleCharacters = Array.from(BigInt(this.rule).toString(this.states));\n            const lookupTable: number[] = Array.from({ length: ruleCharacters.length });\n            for (let i = 0; i < ruleCharacters.length; i++) {\n                let character = ruleCharacters[i];\n                if (character >= '0' && character <= '9') {\n                    lookupTable[i] = +ruleCharacters[i] - +'0';\n                } else {\n                    lookupTable[i] = +ruleCharacters[i] - +'W'\n                }\n            }\n            const initialState = this.randomInitialConfiguration\n                ? Array.from({ length: this.size }, () => Math.round(Math.random()))\n                : Array.from({ length: this.size }, (_, index) => index === Math.floor(this.size / 2) ? 1 : 0);\n\n            return new ElementaryCellularAutomata1D(\n                this.states,\n                this.size,\n                radius,\n                this.rule,\n                initialState,\n                lookupTable\n            );\n        }\n    }\n}\n\nexport const DefaultAutomata = new CellularAutomata.Builder()\n    .withDimensions(Dimensions.UNIDIMENSIONAL)\n    .withType(Type.ELEMENTARY)\n    .withSize(301)\n    .withRule(0)\n    .withStates(2)\n    .build() as CellularAutomata1D;\n\nexport * from './1d/totalisticCellularAutomata1D';\nexport * from './1d/elementaryCellularAutomata1D'\n","import React from \"react\";\nimport { DefaultAutomata } from \"../cellular-automata/\";\n\nconst SketchProvider = React.createContext(DefaultAutomata);\n\nexport default SketchProvider;","import p5 from 'p5';\nimport { CellularAutomata1D } from '../cellular-automata';\n\nconst colors = ['#000000', '#e8b354', '#568140']\n\nexport class CellularAutomata1DPainter {\n    private step: number = 0;\n    private cellSize: number;\n    private sketch: p5;\n    private automata: CellularAutomata1D;\n\n    constructor(sketch: p5, automata: CellularAutomata1D) {\n        this.sketch = sketch;\n        this.automata = automata;\n        this.cellSize = Math.ceil(sketch.width / automata.size);\n    }\n\n    updateAutomata(automata: CellularAutomata1D) {\n        this.automata = automata;\n        this.step = 0;\n    }\n\n    draw() {\n        for (let i = 0; i < this.automata.size; i++) {\n            this.sketch.noStroke();\n            this.sketch.fill(colors[this.automata.state[i]]);\n            this.sketch.rect(this.cellSize*i, this.step*this.cellSize, this.cellSize, this.cellSize);\n        }\n        this.step++;\n    }\n\n    static Builder = class {\n        private sketch?: p5;\n        private automata?: CellularAutomata1D;\n\n        withSketch(sketch: p5) {\n            this.sketch = sketch;\n            return this;\n        }\n\n        withAutomata(automata: CellularAutomata1D) {\n            this.automata = automata;\n            return this;\n        }\n\n        build() {\n            if (this.automata === null) {\n                throw new Error(\"Must pass a cellular automata upon building\");\n            }\n            if (this.sketch === null) {\n                throw new Error(\"Must pass a p5 sketch upon building\");\n            }\n            return new CellularAutomata1DPainter(this.sketch!, this.automata!);\n        }\n    }\n\n}","import * as Tone from 'tone'\nimport { SamplerOptions } from 'tone';\nimport { Instrument } from \"tone/build/esm/instrument/Instrument\";\nimport { CellularAutomata1D } from \"../cellular-automata\";\n\nexport class CellularAutomata1DPlayer {\n    private note = \"R\";\n    private lastNote = \"R\";\n    private notes = [\"R\", \"B2\", \"C3\", \"D3\", \"E3\", \"F3\", \"G3\", \"A3\", \"B3\", \"C4\"];\n    private instrument: Instrument<SamplerOptions>;\n    private automata: CellularAutomata1D;\n\n    constructor(instrument: Instrument<SamplerOptions>, automata: CellularAutomata1D) {\n        this.instrument = instrument;\n        this.automata = automata;\n    }\n\n    updateAutomata(automata: CellularAutomata1D) {\n        this.automata = automata;\n        this.instrument.triggerRelease(this.lastNote);\n        this.note = \"R\";\n        this.lastNote = \"R\";\n    }\n\n    play() {\n        let livingCells = this.automata.state.filter(state => state !== 0).length;\n        this.note = this.notes[livingCells % this.notes.length];\n        if (this.note !== this.lastNote) {\n            this.instrument.triggerRelease(this.lastNote, Tone.now());\n            if (this.note !== \"R\") {\n                this.instrument.triggerAttack(this.note, Tone.now());\n            }\n        }\n        this.lastNote = this.note;\n    }\n\n    static Builder = class {\n        private automata?: CellularAutomata1D\n        withAutomata(automata: CellularAutomata1D) {\n            this.automata = automata;\n            return this;\n        }\n\n        async build() {\n            if (this.automata === null) {\n                throw new Error(\"Must pass a cellular automata upon building\");\n            }\n            const instrument = new Tone.Sampler({\n                urls: {\n                    A1: \"A1.mp3\",\n                    A2: \"A2.mp3\",\n                },\n                baseUrl: \"https://tonejs.github.io/audio/casio/\",\n            }).toDestination();\n\n            await Tone.loaded();\n\n            return new CellularAutomata1DPlayer(instrument, this.automata!);\n        }\n    }\n}","import { P5Instance, ReactP5Wrapper, Sketch } from \"react-p5-wrapper\";\nimport SketchProvider from './SketchProvider';\nimport './styles/SketchStyle.css'\nimport { CellularAutomata1D, DefaultAutomata } from '../cellular-automata';\nimport { CellularAutomata1DPainter } from \"../performers/cellularAutomataDrawer\";\nimport { CellularAutomata1DPlayer } from \"../performers/cellularAutomataPlayer\";\n\nlet automata: CellularAutomata1D;\nlet automataPainter: CellularAutomata1DPainter;\nlet automataPlayer: CellularAutomata1DPlayer;\n\nasync function initPerformers(p5: P5Instance) {\n  let initialAutomata = DefaultAutomata;\n\n  let painter = new CellularAutomata1DPainter.Builder()\n    .withSketch(p5)\n    .withAutomata(initialAutomata)\n    .build();\n\n  let player = await new CellularAutomata1DPlayer.Builder()\n    .withAutomata(initialAutomata)\n    .build();\n\n  return { initialAutomata, painter, player };\n}\n\nconst sketch: Sketch = p5 => {\n  let isSetup = false;\n  let sketchElement = document.getElementById('sketch');\n  let width = sketchElement ? sketchElement.clientWidth : 0;\n  let height = sketchElement ? sketchElement.clientHeight : 0;\n\n  p5.setup = () => {\n    p5.createCanvas(width, height);\n    p5.frameRate(5);\n    initPerformers(p5).then(({ initialAutomata, painter, player }): void => {\n      automata = initialAutomata;\n      automataPainter = painter;\n      automataPlayer = player;\n      isSetup = true;\n    });\n  };\n\n  p5.updateWithProps = props => {\n    if (props.automata && isSetup) {\n      automata = props.automata;\n      automataPainter?.updateAutomata(automata);\n      automataPlayer?.updateAutomata(automata);\n      p5.clear();\n    }\n\n    p5.draw = () => {\n      automataPainter?.draw();\n      automataPlayer?.play();\n      automata?.evolve();\n    }\n  }\n}\n\nexport default function CellularAutomataSketch() {\n  return (<SketchProvider.Consumer>\n    {automata => (\n      <div className=\"CellularAutomataSketch\" id=\"sketch\">\n        <ReactP5Wrapper customClass=\"canvas\" sketch={sketch} automata={automata} />\n      </div>\n    )}\n  </SketchProvider.Consumer>);\n}\n\n","import { useState } from \"react\";\nimport SketchProvider from \"../sketch/SketchProvider\";\nimport CellularAutomataSketch from \"../sketch/sketch\";\nimport './styles/EuterpeStyle.css'\nimport { CellularAutomata, CellularAutomata1D, DefaultAutomata, Dimensions, Type } from \"../cellular-automata\";\nimport * as Tone from 'tone'\n\nexport default function Euterpe() {\n    const [started, setStarted] = useState(false);\n    const [rule, setRule] = useState(0);\n    const [automata, setAutomata] = useState(DefaultAutomata);\n\n    async function start() {\n        await Tone.start();\n        setStarted(true);\n        randomiseRule();\n    }\n\n    async function randomiseRule() {\n        const rule = Math.round(Math.random() * 255);\n        setRule(rule);\n        setAutomata(\n            new CellularAutomata.Builder()\n                .withDimensions(Dimensions.UNIDIMENSIONAL)\n                .withType(Type.ELEMENTARY)\n                .withStates(2)\n                .withSize(301)\n                .withRule(rule)\n                .build() as CellularAutomata1D\n        );\n    }\n\n    return <SketchProvider.Provider value={automata}>\n        <div className=\"Euterpe\">\n            <CellularAutomataSketch />\n            <div className=\"Panel\">\n                <div className=\"Headers\">\n                    <img src={process.env.PUBLIC_URL + \"/earth.png\"} className=\"EarthRadioLogo\" alt=\"Earth\" />\n                    <h1 className=\"Title\">Human Music</h1>\n                    <h2 className=\"Subtitle\">by Earth Radio</h2>\n                </div>\n                <div className=\"Controllers\">\n                    <p className=\"PlayingRule\">{started ? \"Playing rule: \" + rule : \"--\"}</p>\n                    {started\n                        ? <button className=\"ruleButton\" onClick={randomiseRule}>Randomise Rule</button>\n                        : <button className=\"startButton\" onClick={start}>Start</button>\n                    }\n                </div>\n            </div>\n        </div>\n    </SketchProvider.Provider>\n}","import ReactDOM from 'react-dom';\nimport Euterpe from './euterpe/euterpe';\nimport './styles/index.css';\n\nReactDOM.render(\n  <Euterpe/>,\n  document.getElementById('root')\n);"],"sourceRoot":""}