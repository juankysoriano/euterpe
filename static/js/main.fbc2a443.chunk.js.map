{"version":3,"sources":["cellular-automata/1d/elementaryCellularAutomata1D.ts","cellular-automata/1d/default1DCellularAutomata.ts","sketch/SketchProvider.ts","cellular-automata/1d/cellularAutomata1DPainter.ts","sketch/sketch.tsx","euterpe/euterpe.tsx","index.tsx"],"names":["ElementaryCellularAutomata1D","states","size","radius","rule","initialState","lookupTable","_state","tempState","neighbourhoodCode","this","Array","from","length","state","forEach","_","index","evolveCellAt","stateSave","code","computeCodeFor","lookUpIndex","exponential","Math","pow","i","wrappedIndex","offsetA","offsetB","Builder","randomInitialConfiguration","Error","ruleCharacters","BigInt","toString","character","round","random","floor","DefaultAutomata","withSize","withRule","withStates","build","SketchProvider","React","createContext","CellularAutomata1DPainter","sketch","automata","step","cellSize","width","noStroke","setFillColor","rect","fill","p5","note","newNote","notes","loaded","synth","Tone","urls","baseUrl","toDestination","then","height","automataPainter","withSketch","withAutomata","setup","createCanvas","frameRate","updateWithProps","props","clear","draw","livingCells","filter","triggerRelease","triggerAttack","evolve","CellularAutomataSketch","Consumer","className","customClass","Euterpe","useState","started","setStarted","setRule","setAutomata","a","changeRule","Provider","value","onClick","start","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.fbc2a443.chunk.js","sourcesContent":["import { CellularAutomata1D } from './cellularAutomata1D';\n\nexport class ElementaryCellularAutomata1D implements CellularAutomata1D {\n    readonly states: number;\n    readonly size: number;\n    readonly radius: number;\n    readonly rule: number;\n    private _state: number[];\n    private tempState: number[];\n    private neighbourhoodCode: number[];\n    private lookupTable: number[];\n\n    constructor(states: number, size: number, radius: number, rule: number, initialState: number[], lookupTable: number[]) {\n        this.states = states;\n        this.size = size;\n        this.radius = radius;\n        this.rule = rule;\n        this._state = initialState;\n        this.lookupTable = lookupTable;\n        this.tempState = Array.from({ length: size });\n        this.neighbourhoodCode = Array.from({ length: size });\n    }\n\n    get state(): readonly number[] {\n        return this._state;\n    }\n\n    evolve() {\n        this.state.forEach((_, index) => { this.evolveCellAt(index); });\n        const stateSave = this.tempState;\n        this.tempState = this._state;\n        this._state = stateSave;\n    }\n\n    private evolveCellAt(index: number) {\n        const code = this.lookupTable.length - this.computeCodeFor(index) - 1;\n        this.tempState[index] = code >= 0 ? this.lookupTable[code] : 0;\n    }\n\n    private computeCodeFor(index: number) {\n        let exponential = Math.pow(this.states, 2 * this.radius)\n        let lookUpIndex: number;\n        let code = 0;\n        if (index === 0) {\n            for (let i = -this.radius; i <= this.radius; i++) {\n                lookUpIndex = this.wrappedIndex(i);\n                code += exponential * this._state[lookUpIndex];\n                exponential /= this.states;\n            }\n        } else {\n            lookUpIndex = this.wrappedIndex(index - this.radius - 1);\n            let offsetA = exponential * this._state[lookUpIndex];\n            lookUpIndex = this.wrappedIndex(index + this.radius);\n            let offsetB = this._state[lookUpIndex];\n            code = (this.neighbourhoodCode[index - 1] - offsetA) * this.states + offsetB;\n        }\n        this.neighbourhoodCode[index] = code;\n        return code;\n    }\n\n    private wrappedIndex(index: number) {\n        return index < 0 ? index + this.size : index >= this.size ? index - this.size : index;\n    }\n\n\n    static Builder = class {\n        private states: number = 2;\n        private size: number = 100;\n        private rule: number = 0;\n        private randomInitialConfiguration: boolean = false;\n\n        withStates(states: number) {\n            if (states < 1) {\n                throw new Error(\"Number of states must be greater than 1\");\n            }\n            this.states = states;\n            return this;\n        }\n\n        withSize(size: number) {\n            this.size = size;\n            if (size <= 10) {\n                throw new Error(\"Size of cellular automata must be greater than 10\");\n            }\n            return this;\n        }\n\n        withRule(rule: number) {\n            this.rule = rule;\n            if (rule < 0) {\n                throw new Error(\"Rule must be a positive number\");\n            }\n            return this;\n        }\n\n        withRandomInitialConfiguration() {\n            this.randomInitialConfiguration = true;\n            return this;\n        }\n\n        build() {\n            const radius = 1;\n            const ruleCharacters = Array.from(BigInt(this.rule).toString(this.states));\n            const lookupTable: number[] = Array.from({ length: ruleCharacters.length });\n            for (let i = 0; i < ruleCharacters.length; i++) {\n                let character = ruleCharacters[i];\n                if (character >= '0' && character <= '9') {\n                    lookupTable[i] = +ruleCharacters[i] - +'0';\n                } else {\n                    lookupTable[i] = +ruleCharacters[i] - +'W'\n                }\n            }\n            const initialState = this.randomInitialConfiguration\n                ? Array.from({ length: this.size }, () => Math.round(Math.random()))\n                : Array.from({ length: this.size }, (_, index) => index === Math.floor(this.size / 2) ? 1 : 0);\n\n            return new ElementaryCellularAutomata1D(\n                this.states,\n                this.size,\n                radius,\n                this.rule,  \n                initialState,\n                lookupTable\n            );\n        }\n    }\n}","import { CellularAutomata1D } from \"./cellularAutomata1D\";\nimport { ElementaryCellularAutomata1D } from \"./elementaryCellularAutomata1D\";\n\nconst DefaultAutomata = new ElementaryCellularAutomata1D.Builder()\n    .withSize(100)\n    .withRule(0)\n    .withStates(2)\n    .build() as CellularAutomata1D;\n\nexport default DefaultAutomata;","import React from \"react\";\nimport DefaultAutomata from \"../cellular-automata/1d/default1DCellularAutomata\";\n\nconst SketchProvider = React.createContext(DefaultAutomata);\n\nexport default SketchProvider;","import p5 from 'p5';\nimport { CellularAutomata1D } from './cellularAutomata1D';\n\nexport class CellularAutomata1DPainter {\n    private step: number = 0;\n    private cellSize: number;\n    private sketch: p5;\n    private automata: CellularAutomata1D;\n\n    constructor(sketch: p5, automata: CellularAutomata1D) {\n        this.sketch = sketch;\n        this.automata = automata;\n        this.cellSize = sketch.width / automata.size;\n    }\n\n    static Builder = class {\n        private sketch?: p5;\n        private automata?: CellularAutomata1D;\n\n        withSketch(sketch: p5) {\n            this.sketch = sketch;\n            return this;\n        }\n\n        withAutomata(automata: CellularAutomata1D) {\n            this.automata = automata;\n            return this;\n        }\n\n        build() {\n            if (this.automata === null) {\n                throw new Error(\"Must pass a cellular automata upon building\");\n            }\n            if (this.sketch === null) {\n                throw new Error(\"Must pass a p5 sketch upon building\");\n            }\n            return new CellularAutomata1DPainter(this.sketch!, this.automata!);\n        }\n    }\n\n    setup() {\n        this.sketch.noStroke();\n    }\n\n    draw() {\n        for (let i = 0; i < this.automata.size; i++) {\n            this.setFillColor(this.automata.state[i]);\n            this.sketch.rect(this.cellSize*i, this.step*this.cellSize, this.cellSize, this.cellSize);\n\n        }\n        this.step++;\n    }\n\n    private setFillColor(state: number) {\n        if (state === 0) {\n            this.sketch.fill('#000000');\n        } else if (state === 1) {\n            this.sketch.fill('#F36E44');\n        } else if (state === 2) {\n            this.sketch.fill('#568140');\n        }\n    }\n\n}","import { CellularAutomata1DPainter } from '../cellular-automata/1d/cellularAutomata1DPainter';\nimport { ReactP5Wrapper, Sketch } from \"react-p5-wrapper\";\nimport SketchProvider from './SketchProvider';\nimport './SketchStyle.css'\nimport DefaultAutomata from '../cellular-automata/1d/default1DCellularAutomata';\nimport * as Tone from 'tone'\n\nconst sketch: Sketch = p5 => {\n  let note = \"R\";\n  let newNote = \"R\";\n  let notes = [\"R\", \"B2\", \"C3\", \"D3\", \"E3\", \"F3\", \"G3\", \"A3\", \"B3\", \"C4\"]\n  const width = 600;\n  const height = 600;\n  let loaded = false;\n  const synth = new Tone.Sampler({\n    urls: {\n      \"C4\": \"Giuseppe-C.mp3\",\n      \"D4\": \"Giuseppe-D.mp3\",\n      \"E4\": \"Giuseppe-E.mp3\"\n    },\n    baseUrl: \"./sounds/\"\n  }).toDestination();\n  Tone.loaded().then(() => { loaded = true });\n  p5.width = width;\n  p5.height = height;\n  let automata = DefaultAutomata;\n  let automataPainter = new CellularAutomata1DPainter.Builder()\n    .withSketch(p5)\n    .withAutomata(automata)\n    .build();\n\n  p5.setup = () => {\n    p5.createCanvas(width, height);\n    p5.frameRate(5);\n    automataPainter.setup();\n  };\n\n  p5.updateWithProps = props => {\n    if (props.automata) {\n      p5.clear();\n      automata = props.automata;\n      automataPainter = new CellularAutomata1DPainter.Builder()\n        .withSketch(p5)\n        .withAutomata(automata)\n        .build();\n    }\n  }\n\n  p5.draw = () => {\n    if (!loaded) {\n      return;\n    }\n    let livingCells = automata.state.filter(state => state !== 0).length;\n    newNote = notes[livingCells % notes.length];\n    if (note !== newNote) {\n      if (note !== \"R\") {\n        synth.triggerRelease(note, Tone.now());\n      }\n      if (newNote !== \"R\") {\n        synth.triggerAttack(newNote, Tone.now());\n      }\n    }\n    note = newNote;\n    automataPainter.draw();\n    automata.evolve();\n  }\n}\n\nexport default function CellularAutomataSketch() {\n  return (<SketchProvider.Consumer>\n    {automata => (\n      <div className=\"CellularAutomataSketch\">\n        <ReactP5Wrapper customClass=\"canvas\" sketch={sketch} automata={automata} />\n      </div>\n    )}\n  </SketchProvider.Consumer>);\n}","import { useState } from \"react\";\nimport { CellularAutomata1D } from \"../cellular-automata/1d/cellularAutomata1D\";\nimport { ElementaryCellularAutomata1D } from \"../cellular-automata/1d/elementaryCellularAutomata1D\";\nimport SketchProvider from \"../sketch/SketchProvider\";\nimport CellularAutomataSketch from \"../sketch/sketch\";\nimport './EuterpeStyle.css'\nimport DefaultAutomata from \"../cellular-automata/1d/default1DCellularAutomata\";\nimport * as Tone from 'tone'\n\nexport default function Euterpe() {\n    const [started, setStarted] = useState(false);\n    const [rule, setRule] = useState(0);\n    const [automata, setAutomata] = useState(DefaultAutomata);\n\n\n    async function start() {\n        await Tone.start();\n        setStarted(true);\n        changeRule(2);\n    }\n\n    const changeRule = (rule: number) => {\n        setRule(rule);\n        setAutomata(\n            new ElementaryCellularAutomata1D.Builder()\n                .withStates(2)\n                .withSize(100)\n                .withRule(rule)\n                .build() as CellularAutomata1D\n        );\n    }\n\n    return <SketchProvider.Provider value={automata}>\n        <div className=\"Euterpe\">\n            <h1 className=\"ruleHeader\">Playing rule: {rule}</h1>\n            <CellularAutomataSketch />\n            {started\n                ? <button className=\"ruleButton\" onClick={() => { changeRule(Math.round(Math.random() * 255)) }}>Randomise Rule</button>\n                : <button className=\"startButton\" onClick={() => start()}>Start</button>\n            }\n        </div>\n    </SketchProvider.Provider>\n}","import ReactDOM from 'react-dom';\nimport Euterpe from './euterpe/euterpe';\nimport './index.css';\n\nReactDOM.render(\n  <Euterpe/>,\n  document.getElementById('root')\n);"],"sourceRoot":""}